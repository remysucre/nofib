module Raster (draw, cdraw) where
import Interval
import Kolor
import Quad
import Types
 
cdraw :: Int -> Quad -> [Char]
cdraw (!depth) (!q) = (wordy (3 : w : (cout (0, 0) w q [])))
  where  
        w :: Int
        w = 2 ^ (depth :: Int)
 
cout :: (Int, Int) -> Int -> Quad -> [Int] -> [Int]
cout xy w ((!Q_Empty)) = \ (!ints) -> ints
cout (!xy) (!w) (!((!(Q_Full (!a)))))
  = \ ints -> (coutlines xy w a) ints
cout (x, y) (!w) ((!(Q_Sub a (!l)))) = e . f . g . h
  where ((!(l0 : ll1))) = l
        (!((!(l1 : ll2)))) = ll1
        (!((!l2) : (!ll3))) = ll2
        (l3 : ll4) = ll3
        e = cout (x, y) n (l0)
        (!f) = cout (x + n, y) n (l1)
        (!g) = cout (x, y + n) n (l2)
        (!h) = cout (x + n, y + n) n (l3)
        (!n) = w `div` 2
 
coutlines :: (Int, Int) -> Int -> Color -> [Int] -> [Int]
coutlines (x, y) (!l) colour
  = \ (!next) -> x : y : l : r : g : b : next
  where (r, (!g), b) = unmkcolor colour
 
draw :: Int -> Quad -> [Char]
draw depth q = (wordy (0 : w : w : (out (0, 0) w q [])))
  where  
        w :: Int
        w = 2 ^ (depth :: Int)
 
out :: (Int, Int) -> Int -> Quad -> [Int] -> [Int]
out (!xy) (!w) (!((!Q_Empty))) = \ ints -> ints
out (!xy) w (Q_Full (!a)) = \ (!ints) -> (outlines xy w a) ints
out (x, (!y)) (!w) (!((!(Q_Sub a l)))) = e . f . g . h
  where ((!(l0 : ll1))) = l
        (!((!((!l1) : (!ll2))))) = ll1
        (!((!(l2 : (!ll3))))) = ll2
        (!(l3 : ll4)) = ll3
        (!e) = out (x, y) n (l0)
        f = out (x + n, y) n (l1)
        g = out (x, y + n) n (l2)
        (!h) = out (x + n, y + n) n (l3)
        (!n) = w `div` 2
 
outlines :: (Int, Int) -> Int -> Color -> [Int] -> [Int]
outlines (!(x, (!y))) l (!s) = \ n -> x : y : l : l : (shade s) : n
 
shade :: Color -> Int
shade (!((!(RGB r g b)))) = round ((sqrt r) * 255)
 
wordy :: [Int] -> [Char]
wordy (![]) = []
wordy (!((!(a : (!bs))))) = (toEnum b) : (toEnum c) : (wordy bs)
  where (!(b, c)) = a `divMod` 256