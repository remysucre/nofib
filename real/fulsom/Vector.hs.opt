module Vector where
import Interval
import Types
 
makevector :: In -> In -> In -> In -> Vector
makevector (!a') b' c' d' = (x, y, z)
  where a = unpt a'
        b = unpt b'
        (!c) = unpt c'
        (!d) = unpt d'
        x = b - a
        y = c - a
        z = d - a
 
normalise :: Vector -> Vector
normalise xyz@(!((!x), (!y), (!z))) = (x / l, y / l, z / l)
  where l = len xyz
 
len :: Vector -> FType
len ((!x), (!y), z) = ans
  where ans
          | sqs /= 0.0 = sqrt sqs
          | True = 1
         
        sqs :: FType
        sqs = (x2 + y2 + z2)
        x2 = x * x
        (!y2) = y * y
        z2 = z * z
 
light :: Color -> Vector -> Color
light (!((!(RGB r (!g) (!b))))) (!((!x), y, (!z)))
  = RGB (a * r) (a * g) (a * b)
  where a = (max ((0.5773 * x + 0.5773 * y + 0.5773 * z) * (1 - amb))
               0)
              + amb
amb = (0.5 :: FType)