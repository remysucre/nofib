module InitTable (ergs, xComp, xPair, xPhot) where
import GamtebType
import Consts
import Data.Array
 
ergs :: Array Indx Value
ergs = array (1, numLev) (zipWith (,) [1 .. numLev] (map f2 erg))
  where (!erg)
          = [1.0e-3, 1.5e-3, 2.0e-3, 3.0e-3, 4.0e-3, 5.0e-3, 6.0e-3, 8.0e-3,
             1.0e-2, 1.5e-2, 2.0e-2, 3.0e-2, 4.0e-2, 5.0e-2, 6.0e-2, 8.0e-2,
             0.1, 0.15, 0.2, 0.3, 0.4, 0.5, 0.6, 0.8, 1.0, 1.5, 2.0, 3.0, 4.0,
             5.0, 6.0, 8.0, 10.0, 15.0, 20.0]
 
xComp :: Array Indx Value
xComp = array (1, numLev) (zipWith (,) [1 .. numLev] (map f1 xc))
  where (!xc)
          = [1.5e-2, 2.96e-2, 4.51e-2, 7.17e-2, 9.13e-2, 0.105, 0.115, 0.128,
             0.137, 0.152, 0.16, 0.165, 0.165, 0.163, 0.16, 0.153, 0.146, 0.133,
             0.122, 0.106, 9.53e-2, 8.67e-2, 8.02e-2, 7.07e-2, 6.37e-2, 5.16e-2,
             4.4e-2, 3.46e-2, 2.89e-2, 2.5e-2, 2.21e-2, 1.81e-2, 1.54e-2,
             1.14e-2, 9.13e-3]
 
xPair :: Array Indx Value
xPair = array (1, numLev) (zipWith (,) [1 .. numLev] (map f1 xp))
  where xp
          = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             7.92e-5, 3.16e-4, 9.23e-4, 1.53e-3, 2.08e-3, 2.56e-3, 3.43e-3,
             4.14e-3, 5.47e-3, 6.52e-3]
 
xPhot :: Array Indx Value
xPhot = array (1, numLev) (zipWith (,) [1 .. numLev] (map f1 xpe))
  where (!xpe)
          = [2010.0, 632.0, 280.0, 87.7, 37.3, 18.9, 10.4, 4.01, 1.91, 0.489,
             0.192, 4.91e-2, 1.86e-2, 8.87e-3, 4.81e-3, 1.79e-3, 8.62e-4,
             2.34e-4, 9.18e-5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
 
f1 :: Value -> Value
f1 (!x) = if (x < small) then nothing else log (2.2 * x)
 
f2 :: Value -> Value
f2 (!x) = if (x < small) then nothing else log x