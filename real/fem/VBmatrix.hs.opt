module VBmatrix
       (Vbm, defvbmat, makevbmat, incrvbmat, updvbmat, vbmatsub,
        boundvbmat, addrvbmat, lengrvbmat, fstclvbmat, diagadrvbm,
        displayvbmati, displayvbmatr)
       where
import Basics
import Vector
 
data Vbm a = VBMAT Int (Vec Int) (Vec a)
 
defvbmat :: Int -> Vec Int -> Vec a -> Vbm a
 
makevbmat :: Int -> Vec Int -> ((Int, Int) -> a) -> Vbm a
 
updvbmat :: Vbm a -> [((Int, Int), a)] -> Vbm a
 
incrvbmat :: (Num a) => Vbm a -> [((Int, Int), a)] -> Vbm a
 
vbmatsub :: Vbm a -> (Int, Int) -> a
 
boundvbmat :: Vbm a -> Int
 
addrvbmat :: Vbm a -> (Int, Int) -> Int
 
lengrvbmat :: Vbm a -> Int -> Int
 
fstclvbmat :: Vbm a -> Int -> Int
 
diagadrvbm :: Vbm a -> Vec Int
 
displayvbmati :: Vbm Int -> [Char]
 
displayvbmatr :: Vbm Float -> [Char]
lengrvbmat (!((!(VBMAT (!n) addiag elems)))) (!i)
  = if (i == 1) then 1 else
      (vecsub addiag i) - (vecsub addiag (i - 1))
fstclvbmat (VBMAT (!n) addiag elems) (!i)
  = if (i == 1) then 1 else
      i - (lengrvbmat (VBMAT n addiag elems) i) + 1
addrvbmat vbm (i, j) = vecsub addiag i + j - i
  where (VBMAT n addiag (!elementlist)) = vbm
boundvbmat ((!(VBMAT (!bounds) (!addiag) elementlist))) = bounds
diagadrvbm (!((!(VBMAT bounds addiag (!elementlist))))) = addiag
defvbmat bounds addiag (!elementlist)
  = VBMAT bounds addiag elementlist
makevbmat n (!addiag) (!generator)
  = VBMAT n addiag (makevec (vecsub addiag n) f)
  where f i = elemts !! (i - 1)
        (!elemts) = foldl irow [] [1 .. n]
        irow (!ls) i = ls ++ [generator (i, j) | (!j) <- [(fstcl i) .. i]]
        fstcl (!i)
          = if (i == 1) then 1 else
              i - vecsub addiag i + vecsub addiag (i - 1) + 1
incrvbmat vbm updates = VBMAT n addiag new_elements
  where (!(VBMAT n (!addiag) (!elements))) = vbm
        new_elements = incrvec elements new_s
        new_s = map (\ (((!i), j), x) -> (addrvbmat vbm (i, j), x)) updates
updvbmat (!vbm) updates = VBMAT n addiag new_elements
  where VBMAT n (!addiag) elements = vbm
        new_elements = updvec elements new_s
        new_s
          = map (\ (!(((!i), j), x)) -> (addrvbmat vbm (i, j), x)) updates
vbmatsub (!vbm) (i, (!j)) = vecsub elements (addrvbmat vbm (i, j))
  where VBMAT (!n) addiag elements = vbm
displayvbmati vbm
  = "<  \n" ++ concat (map displayvec rows) ++ "> \n"
  where rows = [rowi vbm i | (!i) <- [1 .. n]]
        (!n) = boundvbmat vbm
displayvbmatr (!vbm)
  = "<  \n" ++ concat (map displayvec rows) ++ "> \n"
  where (!rows) = [rowr vbm i | i <- [1 .. n]]
        (!n) = boundvbmat vbm
rowi (!vbm) (!i) = makevec n f
  where n = boundvbmat vbm
        f j
          = if ((j >= (fstclvbmat vbm i)) && (j <= i)) then
              vbmatsub vbm (i, j) else 0
rowr (!vbm) (!i) = makevec n f
  where (!n) = boundvbmat vbm
        f j
          = if ((j >= (fstclvbmat vbm i)) && (j <= i)) then
              vbmatsub vbm (i, j) else 0.0