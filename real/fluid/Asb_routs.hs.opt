module Asb_routs
       (get_asb_table, get_val, list_inner_prod, list_match_prod, add_mat,
        add_u, mult)
       where
import Defs
import S_Array
import Norm
import Data.Ix
 
get_asb_table ::
              Int ->
                Int -> Int -> (My_Array Int [Int]) -> (My_Array Int [(Int, Int)])
get_asb_table total e_total nodel steer
  = s_accumArray (++) [] (1, total)
      (concat
         [zipWith f1 (steer !^ e) (map (\ z -> [(e, z)]) range_nodel) |
          e <- range (1, e_total)])
  where range_nodel = range (1, nodel)
        f1 = \ x y -> (x, y)
 
get_val :: (My_Array Int Frac_type) -> [Int] -> [Frac_type]
get_val arr steer = [arr !^ n | n <- steer]
 
list_inner_prod :: [Frac_type] -> [Frac_type] -> Frac_type
list_inner_prod = \ x y -> sum (zipWith (*) x y)
 
list_match_prod :: [Frac_type] -> [Frac_type] -> Frac_type
list_match_prod = \ x y -> sum (zipWith mult x y)
mult _ 0 = 0
mult x y = x * y
 
add_mat ::
        (My_Array Int Frac_type) ->
          (My_Array Int Frac_type) -> (My_Array Int Frac_type)
add_mat a b
  = s_listArray (s_bounds a) (zipWith (+) (s_elems a) (s_elems b))
 
add_u ::
      (My_Array Int Frac_type, My_Array Int Frac_type) ->
        (My_Array Int Frac_type, My_Array Int Frac_type) ->
          (My_Array Int Frac_type, My_Array Int Frac_type)
add_u = \ a b -> (add_mat (fst a) (fst b), add_mat (snd a) (snd b))