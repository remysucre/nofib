module Jcb_method (jcb_method) where
import Defs
import S_Array
import Norm
import Asb_routs
import Tol_cal
import Data.Ix
 
jcb_method ::
           Int ->
             My_Array Int
               (Frac_type,
                ((Frac_type, Frac_type, Frac_type),
                 (Frac_type, Frac_type, Frac_type)))
               ->
               My_Array Int [(Int, Int)] ->
                 My_Array Int [Int] ->
                   (My_Array Int Bool, (My_Array Int Bool, My_Array Int Bool)) ->
                     (My_Array Int Frac_type, My_Array Int Frac_type) ->
                       Frac_type ->
                         Int ->
                           Frac_type ->
                             Frac_type -> (My_Array Int Frac_type, My_Array Int Frac_type)
sparse_elems = \ y -> map (\ (_, x) -> x) (sparse_assocs y)
jcb_method f_step el_det_fac asb_table v_steer
  (all_bry, (x_fixed, y_fixed)) (b1, b2) scalor max_iter m_iter_toler
  relax = sub_jacobi (init_u, init_u) max_iter
  where n_bnds = s_bounds asb_table
        init_u = s_array n_bnds []
        sub_jacobi old_x n
          = if
              (n <= 1) ||
                ((n /= max_iter) &&
                   (tol_cal ((s_elems (fst new_x)) ++ (s_elems (snd new_x)))
                      ((sparse_elems (fst diff)) ++ (sparse_elems (snd diff)))
                      True)
                     < m_iter_toler)
              then new_x else sub_jacobi new_x (n - 1)
          where new_x = if (n == max_iter) then diff else add_u old_x diff
                diff
                  = if (f_step == 1) then
                      (find_diff x_fixed (fst old_x) b1,
                       find_diff y_fixed (snd old_x) b2)
                      else
                      (find_diff all_bry (fst old_x) b1,
                       find_diff all_bry (snd old_x) b2)
                bindTo x (!k) = k x
                find_diff fixed x b
                  = s_def_listArray n_bnds (0 :: Frac_type)
                      [if fixed !^ i then 0 else
                         ((b !^ i) / scalor) `bindTo`
                           (\ b' ->
                              ((if (n == max_iter) then b' else
                                  b' -
                                    sum
                                      [(list_inner_prod (get_val x (v_steer !^ e))
                                          (map (mult (fst (el_det_fac !^ e))) (m_mat !^ id)))
                                       | (e, id) <- asb_table !^ i])
                                 * relax)
                                / (mat_diag !^ i))
                       | i <- range n_bnds]
        mat_diag
          = s_listArray n_bnds
              [sum
                 [(fst (el_det_fac !^ e)) * (m_r_sum !^ id) |
                  (e, id) <- asb_table !^ i]
               | i <- range n_bnds]
m_r_sum
  = s_def_listArray (1, v_nodel) def_v
      [def_v, def_v, def_v, v', v', v']
  where def_v = (12 / 180) :: Frac_type
        v' = (68 / 180) :: Frac_type
m_mat
  = s_listArray (1, v_nodel)
      (map (map (mult inv_180))
         [[6, (-1), (-1), (-4), 0, 0], [(-1), 6, (-1), 0, (-4), 0],
          [(-1), (-1), 6, 0, 0, (-4)], [(-4), 0, 0, 32, 16, 16],
          [0, (-4), 0, 16, 32, 16], [0, 0, (-4), 16, 16, 32]])
  where inv_180 = 1 / 180