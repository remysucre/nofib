module Numbers (Number) where
 
data Number = Tolerant Float
 
instance Eq Number where
        Tolerant a == Tolerant (!b) = abs (a - b) < eps
        Tolerant a /= Tolerant b = abs (a - b) > eps
 
instance Ord Number where
        Tolerant (!a) <= (!(Tolerant b)) = a - eps < b
        Tolerant a < Tolerant b = a < b - eps
 
instance Num Number where
        Tolerant a + Tolerant (!b) = Tolerant (a + b)
        Tolerant a - (!(Tolerant b)) = Tolerant (a - b)
        Tolerant (!a) * Tolerant (!b) = Tolerant (a * b)
        negate (Tolerant (!a)) = Tolerant (-a)
        fromInteger n = Tolerant (fromInteger n)
 
instance Fractional Number where
        Tolerant a / Tolerant b = Tolerant (a / b)
 
instance Floating Number where
        sqrt (Tolerant (!a)) = Tolerant (sqrt a)
 
instance Read Number where
        readsPrec p s = [(Tolerant n, t) | (n, t) <- readsPrec p s]
 
instance Show Number where
        showsPrec p (Tolerant x) = showsPrec p x
eps = 1.0e-4 :: Float