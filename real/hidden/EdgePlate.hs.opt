module EdgePlate
       (Edge, edgeT, edgeH, s, h, t, Plate(Plt), n, Input, Object,
        makeObject)
       where
import Numbers
import Vectors
 
data Edge = Edg Vector Vector
 
edgeT, edgeH :: Vector -> Vector -> Edge
edgeH (!v) w = Edg v w
edgeT (!v) w = Edg v (w - v)
 
s, h, t :: Edge -> Vector
s (Edg (!v) w) = v
h ((!(Edg (!v) (!w)))) = w
t (!((!(Edg (!v) w)))) = v + w
 
type Input = [[Vector]]
 
data Plate = Plt Int [Edge]
 
n :: Plate -> Vector
n (!(Plt _ (!(l1 : ((!l2) : ls))))) = norm (h (l1) * h (l2))
 
type Object = [Plate]
 
makeObject :: Input -> Object
makeObject = zipWith borders [1 ..]
  where  
        borders :: Int -> [Vector] -> Plate
        borders (!n) ps = Plt n (zipWith edgeT ps (ror 1 ps))
 
ror :: Int -> [a] -> [a]
ror (!n) xs = reverse (take n rvxs) ++ reverse (drop n rvxs)
  where (!rvxs) = reverse xs