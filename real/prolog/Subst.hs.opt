module Subst (Subst, nullSubst, (->>), (@@), apply, unify) where
import PrologData
 
infixr 3 @@
 
infix 4 ->>
 
type Subst = Id -> Term
 
apply :: Subst -> Term -> Term
apply (!s) (Var i) = s i
apply s (!(Struct a (!ts))) = Struct a (map (apply s) ts)
 
nullSubst :: Subst
nullSubst (!i) = Var i
 
(->>) :: Id -> Term -> Subst
(i ->> t) j
  | j == i = t
  | otherwise = Var j
 
(@@) :: Subst -> Subst -> Subst
s1 @@ s2 = apply s1 . s2
 
unify :: Term -> Term -> [Subst]
unify (Var x) (Var y)
  = if x == y then [nullSubst] else [x ->> Var y]
unify (!((!(Var (!x))))) (!t2)
  = [x ->> t2 | not (x `elem` varsIn t2)]
unify t1 (Var y) = [y ->> t1 | not (y `elem` varsIn t1)]
unify (!(Struct (!a) ts)) (!(Struct (!b) ss))
  = [u | a == b, u <- listUnify ts ss]
 
listUnify :: [Term] -> [Term] -> [Subst]
listUnify (![]) [] = [nullSubst]
listUnify (![]) (!((!r) : rs)) = []
listUnify ((!t) : ts) (![]) = []
listUnify (t : ts) (r : rs)
  = [u2 @@ u1 | u1 <- unify t r,
     u2 <- listUnify (map (apply u1) ts) (map (apply u1) rs)]