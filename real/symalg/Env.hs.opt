module Env (Env, initEnv, lookupEnv, enterEnv) where
import Ast
import BasicNumber
 
type Env = [(String, BasicExp)]
 
initEnv :: Env -> Env
initEnv (!_) = [("$prec", (Numb 20))]
 
lookupEnv :: String -> Env -> BasicExp
lookupEnv (!str) [] = BSError
lookupEnv str (!((!((s, (!bexp)) : (!es)))))
  = if s == str then bexp else lookupEnv str es
 
enterEnv :: String -> BasicExp -> Env -> Env
enterEnv (!str) (!bexp) (!env) = (str, bexp) : env1
  where env1 = filter (\ (!c@(s, e)) -> s /= str) env