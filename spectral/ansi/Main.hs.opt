module Main (main) where
import System.Environment
cls = "\f"
goto x y = '\ESC' : '[' : (show y ++ (';' : show x ++ "H"))
at (x, y) s = goto x y ++ s
home = goto 1 1
highlight s = "\ESC[7m" ++ s ++ "\ESC[0m"
 
type Interact = String -> String
 
end :: Interact
end cs = ""
 
readChar, peekChar :: Interact -> (Char -> Interact) -> Interact
readChar eof use [] = eof []
readChar eof use (c : cs) = use c cs
peekChar eof use [] = eof []
peekChar eof use (!cs@(c : _)) = use c cs
 
pressAnyKey :: Interact -> Interact
pressAnyKey prog = readChar prog (\ c -> prog)
 
unreadChar :: Char -> Interact -> Interact
unreadChar c prog cs = prog (c : cs)
 
writeChar :: Char -> Interact -> Interact
writeChar c prog cs = c : prog cs
 
writeString :: String -> Interact -> Interact
writeString s prog cs = s ++ prog cs
 
writes :: [String] -> Interact -> Interact
writes ss = writeString (concat ss)
 
ringBell :: Interact -> Interact
ringBell = writeChar '\a'
 
type Pos = (Int, Int)
clearScreen = writeString cls
writeAt (!(x, y)) s = writeString (goto x y ++ s)
moveTo (x, y) = writeString (goto x y)
 
readAt :: Pos -> Int -> (String -> Interact) -> Interact
readAt (x, y) l use
  = writeAt (x, y) (copy l '_') (moveTo (x, y) (loop 0 ""))
  where loop n s
          = readChar (return s)
              (\ c ->
                 case c of
                     '\b' -> delete n s
                     '\DEL' -> delete n s
                     '\n' -> return s
                     c | n < l -> writeChar c (loop (n + 1) (c : s))
                       | otherwise -> ringBell (loop n s))
        delete (!n) (!s)
          = if n > 0 then writeString "\b_\b" (loop (n - 1) (tail s)) else
              ringBell (loop 0 "")
        return s = use (reverse s)
 
defReadAt ::
          Pos -> Int -> String -> (String -> Interact) -> Interact
defReadAt (!(x, y)) (!l) def use
  = writeAt (x, y) (take l (def ++ repeat '_'))
      (readChar (use def)
         (\ c ->
            if c == '\n' then use def else unreadChar c (readAt (x, y) l use)))
promptReadAt (!(x, y)) l prompt (!use)
  = writeAt (x, y) prompt (readAt (x + length prompt, y) l use)
defPromptReadAt (x, y) l prompt def use
  = writeAt (x, y) prompt
      (defReadAt (x + length prompt, y) l def use)
program
  = writes
      [cls, at (17, 5) (highlight "Demonstration program"),
       at (48, 5) "Version 1.0",
       at (17, 7) "This program illustrates a simple approach",
       at (17, 8) "to screen-based interactive programs using",
       at (17, 9) "the Hugs functional programming system.",
       at (17, 11) "Please press any key to continue ..."]
      (pressAnyKey
         (promptReadAt (17, 15) 18 "Please enter your name: "
            (\ name ->
               (let reply = "Hello " ++ name ++ "!" in
                  writeAt (40 - (length reply `div` 2), 18) reply
                    (moveTo (1, 23)
                       (writeString "I'm waiting...\n" (pressAnyKey end)))))))
main
  = do (n : _) <- getArgs
       interact (foldr (.) id (take (read n) (repeat program)))
 
copy :: Int -> a -> [a]
copy n x = take n (repeat x)