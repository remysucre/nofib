module Main (main) where
import Data.Char
import Data.List
main
  = do (!stuff) <- getContents
       putStr (say stuff)
say = ('\n' :) . unlines . map join . transpose . map picChar
  where join = foldr1 (\ xs ys -> xs ++ "  " ++ ys)
picChar (!c)
  | isUpper c = alphas !! (fromEnum c - fromEnum 'A')
  | isLower c = alphas !! (fromEnum c - fromEnum 'a')
  | isSpace c = blank
  | isDigit c = digits !! (fromEnum c - fromEnum '0')
  | c == '/' = slant
  | c == '\\' = reverse slant
  | otherwise =
    head ([letter | ((!c'), letter) <- punct, c' == c] ++ [nothing])
blank = ["     ", "     ", "     ", "     ", "     "]
slant = ["    ", "   ", "  ", " ", ""]
nothing = repeat ""
punct
  = [('.', ["     ", "     ", "     ", "  .. ", "  .. "]),
     ('?', [" ??? ", "?   ?", "   ? ", "  ?  ", "  .  "]),
     ('!', ["  !  ", "  !  ", "  !  ", "  !  ", "  .  "]),
     ('-', ["     ", "     ", "-----", "     ", "     "]),
     ('+', ["  +  ", "  +  ", "+++++", "  +  ", "  +  "]),
     (':', ["     ", "  :: ", "     ", "  :: ", "     "]),
     (';', ["     ", "  ;; ", "     ", "  ;; ", " ;;  "])]
digits
  = [[" OOO ", "0  00", "0 0 0", "00  0", " 000 "],
     ["  1  ", " 11  ", "  1  ", "  1  ", "11111"],
     [" 222 ", "2   2", "   2 ", "  2  ", "22222"],
     ["3333 ", "    3", " 333 ", "    3", "3333 "],
     ["   4 ", "  44 ", " 4 4 ", "44444", "   4 "],
     ["55555", "5    ", "5555 ", "    5", "5555 "],
     ["   66", "  6  ", " 666 ", "6   6", " 666 "],
     ["77777", "    7", "   7 ", "   7 ", "  7  "],
     [" 888 ", "8   8", " 888 ", "8   8", " 888 "],
     [" 999 ", "9   9", " 999 ", "  9  ", "99   "]]
alphas
  = [["  A  ", " A A ", "AAAAA", "A   A", "A   A"],
     ["BBBB ", "B   B", "BBBB ", "B   B", "BBBB "],
     [" CCCC", "C    ", "C    ", "C    ", " CCCC"],
     ["DDDD ", "D   D", "D   D", "D   D", "DDDD "],
     ["EEEEE", "E    ", "EEEEE", "E    ", "EEEEE"],
     ["FFFFF", "F    ", "FFFF ", "F    ", "F    "],
     [" GGGG", "G    ", "G  GG", "G   G", " GGG "],
     ["H   H", "H   H", "HHHHH", "H   H", "H   H"],
     ["IIIII", "  I  ", "  I  ", "  I  ", "IIIII"],
     ["JJJJJ", "   J ", "   J ", "J  J ", " JJ  "],
     ["K   K", "K  K ", "KKK  ", "K  K ", "K   K"],
     ["L    ", "L    ", "L    ", "L    ", "LLLLL"],
     ["M   M", "MM MM", "M M M", "M   M", "M   M"],
     ["N   N", "NN  N", "N N N", "N  NN", "N   N"],
     [" OOO ", "O   O", "O   O", "O   O", " OOO "],
     ["PPPP ", "P   P", "PPPP ", "P    ", "P    "],
     [" QQQ ", "Q   Q", "Q Q Q", "Q  Q ", " QQ Q"],
     ["RRRR ", "R   R", "RRRR ", "R  R ", "R   R"],
     [" SSSS", "S    ", " SSS ", "    S", "SSSS "],
     ["TTTTT", "  T  ", "  T  ", "  T  ", "  T  "],
     ["U   U", "U   U", "U   U", "U   U", " UUU "],
     ["V   V", "V   V", "V   V", " V V ", "  V  "],
     ["W   W", "W   W", "W   W", "W W W", " W W "],
     ["X   X", " X X ", "  X  ", " X X ", "X   X"],
     ["Y   Y", " Y Y ", "  Y  ", "  Y  ", "  Y  "],
     ["ZZZZZ", "   Z ", "  Z  ", " Z   ", "ZZZZZ"]]