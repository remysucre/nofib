module Digraph where
 
type Edge vertex = (vertex, vertex)
 
type Cycle vertex = [vertex]
 
stronglyConnComp ::
                   Eq vertex => [Edge vertex] -> [vertex] -> [[vertex]]
stronglyConnComp (!es) (!vs)
  = snd
      (span_tree (new_range reversed_edges) ([], [])
         (snd (dfs (new_range es) ([], []) vs)))
  where (!reversed_edges) = map swap es
        swap (x, (!y)) = (y, x)
        new_range [] w = []
        new_range (!((!((!((!x), y)) : (!xys))))) (!w)
          = if x == w then (y : (new_range xys w)) else (new_range xys w)
        span_tree r ((!vs), (!ns)) [] = (vs, ns)
        span_tree (!r) (!((!vs), ns)) ((!x) : xs)
          | x `elem` vs = span_tree r (vs, ns) xs
          | True = span_tree r (vs', (x : ns') : ns) xs
          where (vs', ns') = dfs r (x : vs, []) (r x)
 
dfs :: Eq v => (v -> [v]) -> ([v], [v]) -> [v] -> ([v], [v])
dfs (!r) (!((!vs), (!ns))) (![]) = (vs, ns)
dfs (!r) (vs, (!ns)) (!(x : (!xs)))
  | x `elem` vs = dfs r (vs, ns) xs
  | True = dfs r (vs', (x : ns') ++ ns) xs
  where (vs', ns') = dfs r (x : vs, []) (r x)