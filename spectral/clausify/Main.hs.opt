module Main (main) where
import Data.Ix
import System.Environment
main
  = do (!((!(n : (!_))))) <- getArgs
       putStr (res (read n))
res n = concat (map clauses xs)
  where xs
          = take n (repeat "(a = a = a) = (a = a = a) = (a = a = a)")
         
        {-# NOINLINE xs #-}
 
data StackFrame = Ast Formula
                | Lex Char
 
data Formula = Sym Char
             | Not Formula
             | Dis Formula Formula
             | Con Formula Formula
             | Imp Formula Formula
             | Eqv Formula Formula
clause (!p) = clause' p ([], [])
  where clause' (!((!(Dis (!p) q)))) (!x) = clause' p (clause' q x)
        clause' (Sym s) ((!c), a) = (insert s c, a)
        clause' (!((!(Not ((!(Sym s))))))) ((!c), a) = (c, insert s a)
clauses
  = concat . map disp . unicl . split . disin . negin . elim . parse
conjunct (Con p q) = True
conjunct (!p) = False
disin (!(Dis p (!(Con (!q) r))))
  = Con (disin (Dis p q)) (disin (Dis p r))
disin (Dis (!(Con (!p) q)) r)
  = Con (disin (Dis p r)) (disin (Dis q r))
disin ((!(Dis p q)))
  = if conjunct dp || conjunct dq then disin (Dis dp dq) else
      (Dis dp dq)
  where dp = disin p
        (!dq) = disin q
disin ((!(Con p q))) = Con (disin p) (disin q)
disin p = p
disp (l, r)
  = interleave l spaces ++ "<=" ++ interleave spaces r ++ "\n"
elim ((!(Sym s))) = Sym s
elim ((!(Not (!p)))) = Not (elim p)
elim (Dis p (!q)) = Dis (elim p) (elim q)
elim (Con p q) = Con (elim p) (elim q)
elim (!(Imp p q)) = Dis (Not (elim p)) (elim q)
elim (Eqv (!f) f') = Con (elim (Imp f f')) (elim (Imp f' f))
insert x [] = [x]
insert (!x) p@(y : ys)
  = if x < y then x : p else if x > y then y : insert x ys else p
interleave (x : xs) (!ys) = x : interleave ys xs
interleave (![]) _ = []
negin ((!(Not (!((!(Not p))))))) = negin p
negin (Not (!(Con p q))) = Dis (negin (Not p)) (negin (Not q))
negin (Not (!(Dis p q))) = Con (negin (Not p)) (negin (Not q))
negin (Dis (!p) (!q)) = Dis (negin p) (negin q)
negin ((!(Con p (!q)))) = Con (negin p) (negin q)
negin p = p
opri '(' = 0
opri (!'=') = 1
opri '>' = 2
opri '|' = 3
opri '&' = 4
opri '~' = 5
parse (!t) = f
  where [(!(Ast f))] = parse' t []
parse' [] s = redstar s
parse' (!((!(' ' : t)))) (!s) = parse' t s
parse' ((!'(') : t) (!s) = parse' t (Lex '(' : s)
parse' (!(')' : t)) s = parse' t (x : s')
  where ((!((!x) : ((!(Lex '(')) : (!s'))))) = redstar s
parse' ((!(c : t))) s
  = if inRange ('a', 'z') c then parse' t (Ast (Sym c) : s) else
      if spri s > opri c then parse' (c : t) (red s) else
        parse' t (Lex c : s)
red ((!((!(Ast (!p))) : ((!(Lex (!'='))) : (Ast (!q) : s)))))
  = Ast (Eqv q p) : s
red (!((!(Ast p)) : (!(Lex '>' : (Ast (!q) : s)))))
  = Ast (Imp q p) : s
red (!((!(Ast (!p) : ((!(Lex (!'|'))) : (Ast (!q) : (!s)))))))
  = Ast (Dis q p) : s
red (!(Ast (!p) : (Lex (!'&') : (!(Ast q : s)))))
  = Ast (Con q p) : s
red (!(Ast (!p) : (!((!(Lex '~')) : (!s))))) = Ast (Not p) : s
redstar = while ((/=) 0 . spri) red
spaces = repeat ' '
split p = split' p []
  where split' ((!(Con (!p) q))) a = split' p (split' q a)
        split' (!p) (!a) = p : a
spri (!((!(Ast x)) : ((!(Lex (!c))) : (!s)))) = opri c
spri s = 0
tautclause (!((!c), (!a))) = [x | (!x) <- c, x `elem` a] /= []
unicl a = foldr unicl' [] a
  where unicl' (!p) x = if tautclause cp then x else insert cp x
          where cp = clause p
while p f (!x) = if p x then while p f (f x) else x