module Checker (tautologyp) where
import Lisplikefns
 
tautologyp :: (Lisplist, Lisplist, Lisplist) -> Bool
tautologyp (!(Nil, (!_), (!_))) = False
tautologyp (term@((!(Atom (!x)))), (!truelst), _)
  = truep (term, truelst)
tautologyp ((!term@(Cons ((!x), (!y)))), truelst, (!falselst))
  = if truep (term, truelst) then True else
      if falsep (term, falselst) then False else
        case x of
            Atom "if" -> if truep (car y, truelst) then
                           tautologyp (cadr y, truelst, falselst) else
                           if falsep (car y, falselst) then
                             tautologyp (caddr y, truelst, falselst) else
                             (tautologyp (cadr y, Cons (car y, truelst), falselst)) &&
                               (tautologyp (caddr y, truelst, Cons (car y, falselst)))
            _ -> False
 
truep :: (Lisplist, Lisplist) -> Bool
truep (!(Nil, (!_))) = False
truep (!((!(Cons (!((!(Atom (!"t"))), (!Nil))))), _)) = True
truep ((!term), (!l)) = lispmember (term, l)
 
falsep :: (Lisplist, Lisplist) -> Bool
falsep ((!Nil), _) = False
falsep (!(Cons (Atom "f", Nil), _)) = True
falsep (term, l) = lispmember (term, l)
 
lispmember :: (Lisplist, Lisplist) -> Bool
lispmember (e, (!(Cons (x, xs))))
  | e == x = True
  | otherwise = lispmember (e, xs)
lispmember (!((!_), (!_))) = False