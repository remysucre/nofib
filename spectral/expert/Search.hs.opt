module Search where
import Result
import Table
import Knowledge
import Match
 
data Solution = Soln Environment [String]
              | Question String
freshCopy (Soln (!env) vs) (!p)
  = ((Soln env (drop n vs)), subst tab p)
  where tab
          = updateList newTable (zip xs [Var v | (!v) <- take n vs])
        xs = vars p
        (!n) = length xs
solve (!db) (Question q) g = [Question q]
solve (!db) soln (Term "or" [g1, g2])
  = solve db soln g1 ++ solve db soln g2
solve (!db) soln ((!(Term (!"and") (![g1, (!g2)]))))
  = concat [solve db res g2 | (!res) <- solve db soln g1]
solve db soln g
  = if not (null rs) then lookUp db soln g rs else ask info soln g
  where (defs, info) = db
        (!rs) = relevant defs g
lookUp (!db) (!soln) (!g) (!rs)
  = concat [try db soln' g r' | ((!soln'), (!r')) <- copies]
  where copies = [freshCopy soln r | (!r) <- rs]
try db (!((!(Soln (!env) vs)))) (!g)
  ((!(Term (!"if") (![(!p), newg]))))
  = if fails m then [] else solve db (Soln (answer m) vs) newg
  where m = match env g p
ask info (!((!(Soln env (!vs))))) g
  = Question sp : if ans then [Soln env vs] else []
  where ans = answer (find info sp)
        sp = showPhrase (subst env g)