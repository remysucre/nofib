module Knowledge where
import Result
import Table
import Data.List (nub)
 
data Phrase = Term String [Phrase]
            | Var String
vars (!p) = nub (names p)
  where names (Var x) = [x]
        names ((!(Term (!x) ps))) = concat [names p | (!p) <- ps]
showPhrase (Var (!x)) = x
showPhrase ((!(Term x []))) = x
showPhrase (Term op [p1, p2])
  = showPhrase p1 ++ " " ++ op ++ " " ++ showPhrase p2
rule (!ws) = split ws relation "if" goal
goal ws
  | elem "or" ws = split ws goal "or" goal
  | elem "and" ws = split ws goal "and" goal
  | otherwise = relation ws
relation (!ws) = split ws noun verb noun
  where verb = head [w | (!w) <- ws, elem w verbs]
        (!verbs) = ["is", "describes", "has", "can", "eats"]
noun (![(!a), x])
  | elem a ["a", "an", "the"] = noun [a ++ " " ++ x]
noun [x] | ('A' <= head x) && (head x <= 'Z') = Var x
noun [x] = Term x []
split ws f (!op) (!g) = Term op [f lhs, g rhs]
  where (!lhs) = takeWhile (/= op) ws
        (!rhs) = tail (dropWhile (/= op) ws)
definitions (!ls)
  = updateList newTable [(v, def v) | (!v) <- verbs]
  where def (!v) = [r | r <- rs, verb r == v]
        verbs = nub [verb r | (!r) <- rs]
        verb (!((!(Term "if" (![(!(Term (!v) ns)), (!g)]))))) = v
        rs = [rule (words l) | (!l) <- ls]
relevant (!defs) (Term v ns)
  = if fails lookup then [] else answer lookup
  where (!lookup) = find defs v