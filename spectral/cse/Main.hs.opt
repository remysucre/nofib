module Main (main) where
import StateMonad
 
infix 9 +=>
 
data GenTree a = Node a [GenTree a]
 
type LabGraph a = [(Label, a, [Label])]
 
type Label = Int
 
labelTree :: GenTree a -> GenTree (Label, a)
labelTree t = label t `startingWith` 0
  where label (Node x xs)
          = incr `bind`
              \ n -> mmapl label xs `bind` \ ts -> retURN (Node (n, x) ts)
 
ltGraph :: GenTree (Label, a) -> LabGraph a
ltGraph (Node (n, x) xs)
  = (n, x, map labelOf xs) : concat (map ltGraph xs)
  where labelOf (Node (n, x) xs) = n
 
unGraph :: LabGraph a -> GenTree a
unGraph ((n, x, cs) : ts) = Node x (map (unGraph . find) cs)
  where find c = dropWhile (\ (d, (!_), _) -> c /= d) ts
 
unGraph' :: LabGraph String -> GenTree (Int, String)
unGraph' lg = ung lg `startingWith` []
  where ung ((n, x, cs) : ts)
          = mif (visited n) (retURN (Node (n, "<>") []))
              (mmapl (ung . find) cs `bind` \ ts -> retURN (Node (n, x) ts))
          where find c = dropWhile (\ (d, _, _) -> c /= d) ts
 
visited :: Label -> SM [Label] Bool
visited (!n)
  = fetch `bind`
      \ us ->
        if n `elem` us then retURN True else
          set (n : us) `bind` \ _ -> retURN False
 
findCommon :: Eq a => LabGraph a -> LabGraph a
findCommon = snd . foldr sim (id, [])
  where  
        sim ::
              Eq a =>
              (Label, a, [Label]) ->
                (Label -> Label, LabGraph a) -> (Label -> Label, LabGraph a)
        sim (n, s, cs) (r, lg)
          = if null ms then (r, [(n, s, rcs)] ++ lg) else
              ((n +=> head ms) r, lg)
          where ms = [m | (m, s', cs') <- lg, s == s', cs' == rcs]
                rcs = map r cs
 
(+=>) :: Eq a => a -> b -> (a -> b) -> (a -> b)
((!x) +=> (!fx)) f y = if x == y then fx else f y
 
cse :: Eq a => GenTree a -> LabGraph a
cse = findCommon . ltGraph . labelTree
 
instance Show a => Show (GenTree a) where
        showsPrec (!d) (Node (!x) ts)
          | null ts = shows x
          | otherwise =
            showChar '(' .
              shows x .
                showChar ' ' .
                  (foldr1 (\ x y -> x . showChar ' ' . y) (map shows ts)) .
                    showChar ')'
 
copy :: Int -> a -> [a]
copy (!n) x = take n (repeat x)
space n = copy n ' '
 
drawTree :: GenTree String -> String
drawTree = unlines . draw
draw (Node x ts)
  = grp (s1 ++ pad width x ++ "]") (space (width + 3)) (stLoop ts)
  where stLoop [] = [""]
        stLoop [t] = grp s2 "  " (draw t)
        stLoop (t : ts) = grp s3 s4 (draw t) ++ [s4] ++ rsLoop ts
        rsLoop [t] = grp s5 "  " (draw t)
        rsLoop (t : ts) = grp s6 s4 (draw t) ++ [s4] ++ rsLoop ts
        grp (!fst) rst = zipWith (++) (fst : repeat rst)
        [s1, s2, s3, (!s4), s5, s6]
          | pcGraphics =
            ["\196[", "\196\196", "\196\194", " \179", " \192", " \195"]
          | otherwise = ["-[", "--", "-+", " |", " `", " +"]
        pad (!n) x = take n (x ++ repeat ' ')
        width = 4
        pcGraphics = False
 
showGraph :: Show a => LabGraph a -> String
showGraph (![]) = "[]\n"
showGraph (!xs) = "[" ++ loop (map show xs)
  where loop [x] = x ++ "]\n"
        loop (x : xs) = x ++ ",\n " ++ loop xs
plus x y = Node "+" [x, y]
mult x y = Node "*" [x, y]
prod xs = Node "X" xs
zerO = Node "0" []
a = Node "a" []
b = Node "b" []
c = Node "c" []
d = Node "d" []
examples
  = [example0, example1, example2, example3, example4, example5]
example0 = a
example1 = plus a a
example2 = plus (mult a b) (mult a b)
example3 = plus (mult (plus a b) c) (plus a b)
example4 = prod (scanl plus zerO [a, b, c, d])
example5 = prod (scanr plus zerO [a, b, c, d])
main
  = putStr
      (unlines
         (map
            (\ t ->
               let c = cse t in
                 copy 78 '-' ++
                   "\nExpression:\n" ++
                     show t ++
                       "\n\nTree:\n" ++
                         drawTree t ++
                           "\nLabelled graph:\n" ++
                             showGraph c ++ "\nSimplified tree:\n" ++ showCse c)
            examples))
  where showCse
          = drawTree . mapGenTree (\ (n, s) -> show n ++ ":" ++ s) . unGraph'
        mapGenTree f (Node x ts) = Node (f x) (map (mapGenTree f) ts)